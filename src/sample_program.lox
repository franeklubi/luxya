
// fun fib(n) {
// 	if (n <= 1) {
// 		return n;
// 	}
//
// 	return fib(n - 2) + fib(n - 1);
// }
//
// for let i = 0; i < 10; i = i + 1 {
// 	print str(i) + ": " + str(fib(i));
// }

const Elo;

class Node extends Elo {
	constructor(data) {
		this.data = data;
		this.left = nil;
		this.right = nil;
	}

	insert(data) {
		if this.data == nil {
			this.data = data;
			return;
		}

		if data == nil {
			return;
		}

		if data < this.data {
			if this.left == nil {
				this.left = Node(data);
			} else {
				this.left.insert(data);
			}
		} else if data > this.data {
			if this.right == nil {
				this.right = Node(data);
			} else {
				this.right.insert(data);
			}
		}
	}

	print_tree() {
		if this.left != nil {
			this.left.print_tree();
		}

		print this.data;

		if this.right != nil {
			this.right.print_tree();
		}
	}

	reverse_tree() {
		if this.left != nil {
			this.left.reverse_tree();
		}

		if this.right != nil {
			this.right.reverse_tree();
		}

		const temp = this.left;
		this.left = this.right;
		this.right = temp;
	}
}

const root = Node(2);

root.insert(1);
root.insert(3);
root.insert(7);

print "normal:";
root.print_tree();

print "";
print "reversed:";
root.reverse_tree();
root.print_tree();
