


fun test_fun(
	a,
	b,
) {
	print a;
	print b;
}

print "should print 'heja', then 'siema'";
test_fun(
	"heja",
	"siema",
);

{
	print "asdfsdaflkj";
}


print "";
print "should print false, then true then false";
print !true;
print false or true;
print false and true;

print "";

let x = 0;

for ; x < 4; x = x + 1 {
};

print "should print 0";
print x;


print "";


class Superclass {
	constructor(superarg) {
		this.superarg = superarg;
	}

	method_test() {
		print "method test";
	}
}

class ChildClass extends Superclass {
	constructor(childarg) {
		super(childarg + str(" 😍 testtsette s sdsafdsaf"));

		this.childproperty = childarg;
	}

	print_superarg() {
		super.method_test();

		print this.superarg;
	}
}

const instance = ChildClass("heja");

print "should print 'method test', then 'heja 😍...'";
instance.print_superarg();

print "";

print "should print 'c', false, 1235324";
const char = 'c';

print char;

print 5 == 6;

const heja = 1235324.;

print heja;

3221;



print "";
print "lists, should print true, true, false, false";

const list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "siema"];

// should be true
print has(list, 5);
print has(list, "siema");

// should be false
print has(list, 11);
print has(list, "siemak");


print "";
print "objects, should print true, false";

// should be true
print has(instance, "superarg");

// should be false
print has(instance, "asdf");


print "";
print "strings, should print true, false";

// should be true
print has("abcd", "bc");

// should be false
print has("dcba", "bc");


print "";
print "chars, should print true, false";

// should be true
print has("abcd", 'b');

// should be false
print has("abcd", 'e');


print "";
print "should print 'chuj'";
const ahahash = "chuj";

print ahahash;

for let x = 0; x < 10; x = x + 1 {
	if x > 5 {
		continue;
	}

	print x;
}

if (true) {
	print "pierwszy";
} else if false {
	print "drugi";
} else if false {
	print "trzeci";
} else {
	print "czwarty";
};

const map = {};

map.("arbitrary key") = "value!";

print has(map, "arbitrary key");	// true

unset(map, "arbitrary key");
print has(map, "arbitrary key");	// false

print typeof(true);
print typeof("luxya ✨");
print typeof(2136);

const letters = chars("luxya 🤢");

letters[6] = '✨';

print from_chars(letters);	// luxya ✨

print number("1234");
print number('a');

const name = "luxya ✨";

print chars(name);	// [ l, u, x, y, a,  , ✨ ];

print extend([1], [2, 3, 4]);

const nan = 0 / 0;

print floor(nan);

const obj = {
	chuj: 2,
};

print unset(obj, "asdf");
